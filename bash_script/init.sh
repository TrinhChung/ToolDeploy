INPUT_DIR="$1"
APP_ID="$2"
APP_SECRET="$3"
DNS_WEB="$4"
APP_NAME="$5"
EMAIL="$6"
ADDRESS="$7"
PHONE_NUMBER="$8"
COMPANY_NAME="$9"
TAX_NUMBER="$10"
TARGET_DIR="/home/$1"

#!/bin/bash

set -e  # D·ª´ng n·∫øu c√≥ l·ªói
set -o pipefail

trap 'echo "‚ùå ƒê√£ x·∫£y ra l·ªói t·∫°i d√≤ng $LINENO. D·ª´ng c√†i ƒë·∫∑t."' ERR

echo "üì¶ C·∫≠p nh·∫≠t g√≥i v√† c√†i ca-certificates, curl, gnupg, lsb-release..."
sudo DEBIAN_FRONTEND=noninteractive apt-get update
sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates curl gnupg lsb-release

# --- Git ---
if ! dpkg -s git &> /dev/null; then
  echo "üß∞ C√†i ƒë·∫∑t Git..."
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y git
elseC
  echo "‚úÖ Git ƒë√£ ƒë∆∞·ª£c c√†i."
fi

# --- Nginx ---
if ! dpkg -s nginx &> /dev/null; then
  echo "üåê C√†i ƒë·∫∑t Nginx..."
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y nginx
else
  echo "‚úÖ Nginx ƒë√£ ƒë∆∞·ª£c c√†i."
fi

sudo ufw allow 80
sudo ufw allow 443

# --- Python ---
if ! command -v python3 &> /dev/null; then
  echo "üêç C√†i ƒë·∫∑t Python3..."
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3
else
  echo "‚úÖ Python3 ƒë√£ ƒë∆∞·ª£c c√†i."
fi

# --- Pip ---
if ! command -V python3-pip &> /dev/null; then
  echo "üêç C√†i ƒë·∫∑t PIP..."
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3-pip
else
  echo "‚úÖ PIP ƒë√£ ƒë∆∞·ª£c c√†i."
fi

if ! command -V python3-venv &> /dev/null; then
  echo "üêç C√†i ƒë·∫∑t PIP..."
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3-venv
else
  echo "‚úÖ PIP ƒë√£ ƒë∆∞·ª£c c√†i."
fi

SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_hex(24))")

# --- Certbot ---
if ! dpkg -s certbot python3-certbot-nginx &> /dev/null; then
  echo "üîí C√†i ƒë·∫∑t Certbot + plugin Nginx..."
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y certbot python3-certbot-nginx
else
  echo "‚úÖ Certbot ƒë√£ ƒë∆∞·ª£c c√†i."
fi

# --- yq ---
if ! command -v yq &> /dev/null; then
  echo "üìù C√†i ƒë·∫∑t yq (x·ª≠ l√Ω YAML)..."
  sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
  sudo chmod +x /usr/local/bin/yq
else
  echo "‚úÖ yq ƒë√£ ƒë∆∞·ª£c c√†i."
fi

# --- Docker ---
if ! dpkg -s docker-ce &> /dev/null; then
  echo "üê≥ C√†i ƒë·∫∑t Docker..."

  sudo install -m 0755 -d /etc/apt/keyrings
  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc

  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo DEBIAN_FRONTEND=noninteractive apt-get update
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
    docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
else
  echo "‚úÖ Docker ƒë√£ ƒë∆∞·ª£c c√†i."
fi

if ! command -v nc &> /dev/null; then
  echo "üì° C√†i ƒë·∫∑t netcat..."
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y netcat
else
  echo "‚úÖ netcat ƒë√£ ƒë∆∞·ª£c c√†i."
fi

# --- Ki·ªÉm tra ---
echo
echo "Ki·ªÉm tra package"
echo "üîç Phi√™n b·∫£n ki·ªÉm tra:"
git --version || echo "Git ‚ùå"
nginx -v || echo "Nginx ‚ùå"
certbot --version || echo "Certbot ‚ùå"
yq --version || echo "yq ‚ùå"
docker --version || echo "Docker ‚ùå"
docker compose version || echo "Compose plugin ‚ùå"
python3 --version || echo "Python ‚ùå"

# --- x·ª≠ l√Ω pull code ---
echo
echo "Pull code"
REPO_URL="https://github.com/bach-long/getvideo-public.git"

if [ ! -d "$TARGET_DIR" ]; then
  echo "üì• Th∆∞ m·ª•c ch∆∞a t·ªìn t·∫°i, ƒëang clone t·ª´ git..."
  git clone "$REPO_URL" "$TARGET_DIR"
else
  echo "‚úÖ Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i, b·ªè qua git clone."
fi

# --- x·ª≠ l√Ω port ---
echo
echo "ƒê·ªïi port ·ª©ng v·ªõi s·ªë container"
cd "$TARGET_DIR" || { echo "Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!"; exit 1; }
count=$(docker ps -a --filter "name=flask-app" --format "{{.Names}}" | wc -l)
new_port=$((5000 + count))
yq eval ".services.flask-app.ports = [\"${new_port}:5000\"]" -i docker-compose.yml

echo "ƒê√£ ƒë·∫∑t ports th√†nh ${new_port}:5000 trong docker-compose.yml"

# --- x·ª≠ l√Ω port ---
echo
echo "ƒê·ªïi port ·ª©ng v·ªõi s·ªë container"
cd "$TARGET_DIR" || { echo "Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!"; exit 1; }
COUNT=$(docker ps -a --filter "name=flask-app" --format "{{.Names}}" | wc -l)
NEW_PORT=$((5000 + count))
yq eval ".services.flask-app.ports = [\"${NEW_PORT}:5000\"]" -i docker-compose.yml

echo "ƒê√£ ƒë·∫∑t ports th√†nh ${new_port}:5000 trong docker-compose.yml"

echo
echo "nh·∫≠p th√¥ng tin env"
cat > "$TARGET_DIR/.env" <<EOF
ACCESS_TOKEN=
USER_TOKEN=
APP_TOKEN=
APP_ID=$APP_ID
APP_SECRET=$APP_SECRET
SECRET_KEY=$SECRET_KEY
TOKEN_TELEGRAM_BOT=
APP_NAME=$APP_NAME
PASSWORD_DB=password123456
NAME_DB=video
USER_DB=admin
ADDRESS_DB=127.0.0.1
EMAIL=chungtrinh2k2@gmail.com
ADDRESS=147 Th√°i Phi√™n, Ph∆∞·ªùng 9, Qu·∫≠n 11, TP.HCM, Vi·ªát Nam
PHONE_NUMBER=07084773586
DNS_WEB=$DNS_WEB
COMPANY_NAME=C√îNG TY TNHH NOIR STEED
TAX_NUMBER=0318728792
EOF

echo
echo "T·∫°o m·∫°ng d√πng chung gi·ªØa c√°c container"
if ! docker network ls --format '{{.Name}}' | grep -q '^shared-net$'; then
  echo "üîß M·∫°ng shared-net ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi..."
  docker network create shared-net
else
  echo "‚úÖ M·∫°ng shared-net ƒë√£ t·ªìn t·∫°i."
fi

echo
echo "T·∫°o file docker compose cho mysql"
cat > "/home/docker-compose.yml" <<EOF
version: "3"
services:
  db:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password123456
      MYSQL_DATABASE: video
      MYSQL_USER: admin
      MYSQL_PASSWORD: password123456
    expose:
      - 3306
    ports:
      - "3306:3306"
    volumes:
      - /tmp/app/mysqld:/run/mysqld
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - shared-net

volumes:
  db_data:

networks:
  shared-net:
    external: true
EOF

echo "‚úÖ File docker-compose.yml ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i: /home/docker-compose.yml"

echo
echo "T·∫°o file c·∫•u h√¨nh nginx"
CONFIG_FILE="/etc/nginx/sites-enabled/$DNS_WEB"
cat > "$CONFIG_FILE" <<EOF
server {
    server_name $DNS_WEB;

    location / {
        if (\$query_string ~* "union.*select.*\(") {
                return 403;
        }
        if (\$query_string ~* "select.+from") {
                return 403;
        }
        if (\$query_string ~* "insert\s+into") {
                return 403;
        }
        if (\$query_string ~* "drop\s+table") {
                return 403;
        }
        if (\$query_string ~* "information_schema") {
                return 403;
        }
        if (\$query_string ~* "sleep\((\s*)(\d*)(\s*)\)") {
                return 403;
        }
        proxy_pass http://127.0.0.1:$NEW_PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

echo
echo "C·∫•u h√¨nh certbot"
if [ -f "$CONFIG_FILE" ]; then
  echo "‚öôÔ∏è File c·∫•u h√¨nh $CONFIG_FILE t·ªìn t·∫°i, ch·∫°y Certbot..."
  sudo certbot --nginx -d "$DNS_WEB" --non-interactive --agree-tos --email nguyenbach19122002@gmail.com
  sudo certbot renew
else
  echo "‚ùå File c·∫•u h√¨nh $CONFIG_FILE kh√¥ng t·ªìn t·∫°i, b·ªè qua Certbot."
fi

echo
echo "ch·∫°y docker"
echo "1 ch·∫°y mysql"
cd /home
db_container_count=$(docker ps -a --filter "name=mysql_db" --format "{{.Names}}" | wc -l)

if [ "$db_container_count" -eq 1 ] && nc -z 127.0.0.1 3306; then
  echo "‚úÖ MySQL ƒëang ch·∫°y tr√™n port 3306."
else
  echo "üöÄ Kh·ªüi ƒë·ªông MySQL container..."
  docker compose up -d --build
fi

app_container_count=$(docker ps --filter "name=$INPUT_DIR" --format "{{.Names}}" | wc -l)
if [ "$app_container_count" -eq 1 ]; then
  echo "‚úÖ App ƒë√£ ch·∫°y th√†nh c√¥ng"
else
  echo "üïì ƒêang ch·ªù MySQL container s·∫µn s√†ng..."

  # L·∫∑p cho ƒë·∫øn khi MySQL s·∫µn s√†ng
  while ! ( [ "$(docker ps -a --filter "name=mysql_db" --format "{{.Names}}" | wc -l)" -eq 1 ] && docker exec mysql_db mysqladmin ping -u root -p"password123456" --silent 2>/dev/null | grep -q "mysqld is alive" ); do
    echo "‚è≥ ƒêang ch·ªù MySQL container kh·ªüi ƒë·ªông v√† m·ªü c·ªïng 3306..."
    sleep 4
  done

  echo "üöÄ Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng..."
  if [ -d "/home/myenv" ]; then
    echo "Folder t·ªìn t·∫°i"
  else
    python3 -m venv /home/myenv
  fi
  echo "T·∫°o folder virtual env th√†nh c√¥ng"
  source /home/myenv/bin/activate
  if [ $? -eq 0 ]; then
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y pkg-config default-libmysqlclient-dev build-essential
    export TZ=Asia/Ho_Chi_Minh
    echo "L·ªánh ch·∫°y th√†nh c√¥ng"
    cd "$TARGET_DIR"
    #pip install --upgrade pip
    pip install -r requirements.txt
    flask db upgrade &&
    nohup flask run --host=0.0.0.0 --port=$NEW_PORT &
  else
      echo "L·ªánh th·∫•t b·∫°i"
  fi
fi